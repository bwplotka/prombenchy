apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus
  namespace: core
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1000Gi  # If you change this make sure to update the prometheus meta disk retention settings.
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
  namespace: core
data:
  config.yaml: |
    global:
      scrape_interval: 15s

    rule_files:
    - /etc/prometheus/alerts/*.yml

    scrape_configs:

    - job_name: kubelet
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

    - job_name: kube-state-metrics
      honor_timestamps: true
      scheme: http
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - separator: ;
        regex: __meta_kubernetes_service_label_(.+)
        replacement: $1
        action: labelmap
      - source_labels: [__meta_kubernetes_service_label_app]
        separator: ;
        regex: kube-state-metrics
        replacement: $1
        action: keep
      metric_relabel_configs:
      - action: replace
        source_labels: [__name__, namespace]
        regex: kube_namespace_created;prombenchy-(.+)
        target_label: benchmark
        replacement: $1

    - job_name: cadvisor
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

    - job_name: pods
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: pod

      relabel_configs:
      - action: keep
        source_labels: [__meta_kubernetes_pod_label_app]
        regex: parca|prometheus|managed-prometheus-collector
      - action: replace
        source_labels: [__meta_kubernetes_pod_label_app]
        target_label: job
      - action: replace
        source_labels: [__meta_kubernetes_namespace]
        target_label: namespace
      - action: replace
        source_labels: [__meta_kubernetes_pod_label_prometheus]
        target_label: prometheus
      - action: replace
        source_labels: [__meta_kubernetes_pod_node_name]
        target_label: node_name
      - action: replace
        source_labels: [__meta_kubernetes_pod_container_name;__address__]
        target_label: instance
        regex: (.*);http://[\d\.]+:(\d)
        replacement: $1:$2
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        regex: .*-ins$
        action: keep
      - action: replace
        source_labels: [__meta_kubernetes_pod_label_benchmark]
        target_label: benchmark

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: core
  labels:
    app: prometheus
    prometheus: meta
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      prometheus: meta
  template:
    metadata:
      labels:
        app: prometheus
        prometheus: meta
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsUser: 0
      initContainers:
      - name: config-init
        image: gke.gcr.io/gke-distroless/bash:20220419
        command: [ '/bin/bash', '-c', 'touch /prometheus/config_out/config.yaml' ]
        volumeMounts:
        - name: config-out
          mountPath: /prometheus/config_out
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          privileged: false
      containers:
      - name: config-reloader
        image: gke.gcr.io/prometheus-engine/config-reloader:v0.8.1-gke.6
        args:
        - --config-file=/prometheus/config/config.yaml
        - --config-file-output=/prometheus/config_out/config.yaml
        - --reload-url=http://localhost:9090/-/reload
        - --ready-url=http://localhost:9090/-/ready
        - --listen-address=:19091
        ports:
        - name: reloader-ins
          containerPort: 8080
        resources:
          limits:
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
        volumeMounts:
        - name: config
          mountPath: /prometheus/config
        - name: config-out
          mountPath: /prometheus/config_out
      - image: gke.gcr.io/prometheus-engine/prometheus:v2.45.3-gmp.1-gke.0
        args:
        - --config.file=/prometheus/config_out/config.yaml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.size=500GB  # 50% of the total storage available.
        - --web.enable-lifecycle
        - --storage.tsdb.no-lockfile
        #- "--web.external-url=http://{{ .DOMAIN_NAME }}/prometheus-meta"
        name: prometheus
        volumeMounts:
        - name: config-out
          mountPath: /prometheus/config_out
          readOnly: true
#        - name: alert-rules
#          mountPath: /etc/prometheus/alerts
        - name: storage
          mountPath: /data
          subPath: prometheus-data
        ports:
        - name: prom-web-ins
          containerPort: 9090
      volumes:
      - name: config
        configMap:
          name: prometheus
          defaultMode: 420
      - name: config-out
        emptyDir: {}
#      - name: alert-rules
#        configMap:
#          name: alert-rules
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus
      terminationGracePeriodSeconds: 300
      nodeSelector:
        role: core
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: core
  labels:
    prometheus: meta
    app: prometheus
spec:
  type: NodePort
  ports:
  - name: prom-web
    port: 80
    targetPort: prom-web-ins
  selector:
    app: prometheus
    prometheus: meta
